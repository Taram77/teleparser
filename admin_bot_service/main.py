import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.exc import IntegrityError
import config
from database import SessionLocal, Channel, Setting
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("admin_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# State for adding channels
class ChannelForm(StatesGroup):
    waiting_for_channel_id = State()

# State for changing welcome text
class WelcomeTextForm(StatesGroup):
    waiting_for_new_text = State()

# Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–∏ –ë–î –≤ —Ö—ç–Ω–¥–ª–µ—Ä—ã
async def db_session_middleware(handler, event, data):
    db = SessionLocal()
    data["db"] = db
    try:
        return await handler(event, data)
    finally:
        db.close()

dp.message.middleware(db_session_middleware) # –ü—Ä–∏–º–µ–Ω—è–µ–º middleware

@dp.message(lambda message: message.chat.id != config.ADMIN_CHAT_ID)
async def handle_non_admin_messages(message: types.Message):
    """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–æ–≤."""
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

@dp.message(commands=["start"])
async def command_start_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    text = (
        "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/channels - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/text - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/status - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
    )
    await message.answer(text)

@dp.message(commands=["channels"])
async def command_channels_handler(message: types.Message, db: SessionLocal):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å."""
    channels = db.query(Channel).all()
    if not channels:
        response = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
    else:
        response = "<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
        for ch in channels:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if ch.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            response += f"- <code>{ch.telegram_id}</code>: {ch.title} ({status})\n"
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞", callback_data="toggle_channel_status")]
        ]
    )
    await message.answer(response, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "add_channel")
async def callback_add_channel(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>@channel_username</code> –∏–ª–∏ <code>-1001234567890</code>):")
    await state.set_state(ChannelForm.waiting_for_channel_id)

@dp.message(ChannelForm.waiting_for_channel_id)
async def process_channel_id(message: types.Message, state: FSMContext, db: SessionLocal):
    channel_input = message.text.strip()
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∫–∞–Ω–∞–ª–∞ –ø–æ username/—Å—Å—ã–ª–∫–µ
    # –ù–æ –¥–ª—è aiogram —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –¥–ª—è Telethon. 
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ Aggregator Service –º–æ–≥ –±—ã –∏–º–µ—Ç—å endpoint –¥–ª—è —ç—Ç–æ–≥–æ,
    # –∏–ª–∏ –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID.
    
    try:
        telegram_id = int(channel_input) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç ID
        # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–Ω–æ –æ–Ω –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
        # chat = await bot.get_chat(telegram_id)
        # title = chat.title
        title = f"–ö–∞–Ω–∞–ª {telegram_id}" # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ

        existing_channel = db.query(Channel).filter_by(telegram_id=telegram_id).first()
        if existing_channel:
            await message.answer(f"–ö–∞–Ω–∞–ª <code>{telegram_id}</code> (<b>{existing_channel.title}</b>) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            new_channel = Channel(telegram_id=telegram_id, title=title, is_active=True)
            db.add(new_channel)
            db.commit()
            await message.answer(f"–ö–∞–Ω–∞–ª <code>{telegram_id}</code> (<b>{title}</b>) –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except IntegrityError:
        db.rollback()
        await message.answer(f"–ö–∞–Ω–∞–ª <code>{telegram_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"Error adding channel {channel_input}: {e}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
    finally:
        await state.clear()
        await command_channels_handler(message, db) # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫


@dp.callback_query(lambda c: c.data == "toggle_channel_status")
async def callback_toggle_channel_status(callback_query: types.CallbackQuery, db: SessionLocal):
    await callback_query.answer()
    channels = db.query(Channel).all()
    if not channels:
        await callback_query.message.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        return

    keyboard_buttons = []
    for ch in channels:
        status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if ch.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        keyboard_buttons.append(
            [types.InlineKeyboardButton(text=f"{ch.title} ({ch.telegram_id}) - {status_text}", callback_data=f"toggle_channel_{ch.telegram_id}")]
        )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("toggle_channel_"))
async def callback_toggle_channel_status_confirm(callback_query: types.CallbackQuery, db: SessionLocal):
    await callback_query.answer()
    channel_id = int(callback_query.data.split("_")[2])
    channel = db.query(Channel).filter_by(telegram_id=channel_id).first()

    if channel:
        channel.is_active = not channel.is_active
        db.commit()
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if channel.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        await callback_query.message.edit_text(f"–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ <b>{channel.title}</b> (<code>{channel.telegram_id}</code>) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}.", reply_markup=None)
        await command_channels_handler(callback_query.message, db)
    else:
        await callback_query.message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(commands=["text"])
async def command_text_handler(message: types.Message, state: FSMContext, db: SessionLocal):
    current_text_setting = db.query(Setting).filter_by(key="INITIAL_QUESTION_TEXT").first()
    current_text = current_text_setting.value if current_text_setting else config.INITIAL_QUESTION_TEXT
    
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n<code>{current_text}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
    )
    await state.set_state(WelcomeTextForm.waiting_for_new_text)

@dp.message(WelcomeTextForm.waiting_for_new_text)
async def process_new_welcome_text(message: types.Message, state: FSMContext, db: SessionLocal):
    new_text = message.text.strip()
    if not new_text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    setting = db.query(Setting).filter_by(key="INITIAL_QUESTION_TEXT").first()
    if setting:
        setting.value = new_text
    else:
        setting = Setting(key="INITIAL_QUESTION_TEXT", value=new_text, description="–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É.")
        db.add(setting)
    
    db.commit()
    config.INITIAL_QUESTION_TEXT = new_text # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É)
    await message.answer("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

async def main_admin_bot():
    logger.info("Starting Admin Bot Service...")
    await dp.start_polling(bot)
    logger.info("Admin Bot Service stopped.")

if __name__ == "__main__":
    asyncio.run(main_admin_bot())
